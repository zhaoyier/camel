// Code generated by protoc-gen-go. DO NOT EDIT.
// source: internal.proto

/*
Package lizard is a generated protocol buffer package.

It is generated from these files:
	internal.proto

It has these top-level messages:
	Result
	RegisterServerReq
	RegisterServerResp
*/
package lizard

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Source int32

const (
	Source_Unknown   Source = 0
	Source_User      Source = 1
	Source_Gateway   Source = 2
	Source_Server    Source = 3
	Source_SRegister Source = 4
	Source_ToClient  Source = 5
)

var Source_name = map[int32]string{
	0: "Unknown",
	1: "User",
	2: "Gateway",
	3: "Server",
	4: "SRegister",
	5: "ToClient",
}
var Source_value = map[string]int32{
	"Unknown":   0,
	"User":      1,
	"Gateway":   2,
	"Server":    3,
	"SRegister": 4,
	"ToClient":  5,
}

func (x Source) String() string {
	return proto.EnumName(Source_name, int32(x))
}
func (Source) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type InternalType int32

const (
	InternalType_IUnknown  InternalType = 0
	InternalType_IPing     InternalType = 1
	InternalType_IRegister InternalType = 2
)

var InternalType_name = map[int32]string{
	0: "IUnknown",
	1: "IPing",
	2: "IRegister",
}
var InternalType_value = map[string]int32{
	"IUnknown":  0,
	"IPing":     1,
	"IRegister": 2,
}

func (x InternalType) String() string {
	return proto.EnumName(InternalType_name, int32(x))
}
func (InternalType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Result struct {
	Code    int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Result) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Result) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type RegisterServerReq struct {
	Addr   string `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Modulo int32  `protobuf:"varint,2,opt,name=modulo" json:"modulo,omitempty"`
}

func (m *RegisterServerReq) Reset()                    { *m = RegisterServerReq{} }
func (m *RegisterServerReq) String() string            { return proto.CompactTextString(m) }
func (*RegisterServerReq) ProtoMessage()               {}
func (*RegisterServerReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RegisterServerReq) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *RegisterServerReq) GetModulo() int32 {
	if m != nil {
		return m.Modulo
	}
	return 0
}

type RegisterServerResp struct {
	Result *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *RegisterServerResp) Reset()                    { *m = RegisterServerResp{} }
func (m *RegisterServerResp) String() string            { return proto.CompactTextString(m) }
func (*RegisterServerResp) ProtoMessage()               {}
func (*RegisterServerResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RegisterServerResp) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*Result)(nil), "lizard.Result")
	proto.RegisterType((*RegisterServerReq)(nil), "lizard.RegisterServerReq")
	proto.RegisterType((*RegisterServerResp)(nil), "lizard.RegisterServerResp")
	proto.RegisterEnum("lizard.Source", Source_name, Source_value)
	proto.RegisterEnum("lizard.InternalType", InternalType_name, InternalType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Internal service

type InternalClient interface {
	RegisterServer(ctx context.Context, in *RegisterServerReq, opts ...grpc.CallOption) (*RegisterServerResp, error)
}

type internalClient struct {
	cc *grpc.ClientConn
}

func NewInternalClient(cc *grpc.ClientConn) InternalClient {
	return &internalClient{cc}
}

func (c *internalClient) RegisterServer(ctx context.Context, in *RegisterServerReq, opts ...grpc.CallOption) (*RegisterServerResp, error) {
	out := new(RegisterServerResp)
	err := grpc.Invoke(ctx, "/lizard.Internal/RegisterServer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Internal service

type InternalServer interface {
	RegisterServer(context.Context, *RegisterServerReq) (*RegisterServerResp, error)
}

func RegisterInternalServer(s *grpc.Server, srv InternalServer) {
	s.RegisterService(&_Internal_serviceDesc, srv)
}

func _Internal_RegisterServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).RegisterServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lizard.Internal/RegisterServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).RegisterServer(ctx, req.(*RegisterServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Internal_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lizard.Internal",
	HandlerType: (*InternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterServer",
			Handler:    _Internal_RegisterServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal.proto",
}

func init() { proto.RegisterFile("internal.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x31, 0x6f, 0xfa, 0x30,
	0x10, 0xc5, 0xff, 0xe1, 0x4f, 0x0c, 0x39, 0x28, 0x72, 0x6f, 0xa8, 0x28, 0x13, 0x62, 0xa8, 0x10,
	0x03, 0x03, 0x95, 0x98, 0x2a, 0x75, 0xe8, 0x80, 0xb2, 0x55, 0x0e, 0x7c, 0x00, 0x97, 0x9c, 0x50,
	0xd4, 0x60, 0xa7, 0xb6, 0x53, 0x44, 0x3f, 0x7d, 0x15, 0x27, 0x29, 0x2a, 0x52, 0xb7, 0x3b, 0x3f,
	0xf9, 0x77, 0xef, 0xde, 0xc1, 0x28, 0x53, 0x8e, 0x8c, 0x92, 0xf9, 0xb2, 0x30, 0xda, 0x69, 0x64,
	0x79, 0xf6, 0x25, 0x4d, 0x3a, 0x5b, 0x03, 0x13, 0x64, 0xcb, 0xdc, 0x21, 0x42, 0x77, 0xaf, 0x53,
	0x1a, 0x07, 0xd3, 0x60, 0x1e, 0x0a, 0x5f, 0xe3, 0x18, 0x7a, 0x47, 0xb2, 0x56, 0x1e, 0x68, 0xdc,
	0x99, 0x06, 0xf3, 0x48, 0xb4, 0xed, 0xec, 0x19, 0x6e, 0x05, 0x1d, 0x32, 0xeb, 0xc8, 0x24, 0x64,
	0x3e, 0xc9, 0x08, 0xfa, 0xa8, 0x10, 0x32, 0x4d, 0x8d, 0x47, 0x44, 0xc2, 0xd7, 0x78, 0x07, 0xec,
	0xa8, 0xd3, 0x32, 0xd7, 0x9e, 0x10, 0x8a, 0xa6, 0x9b, 0x3d, 0x01, 0x5e, 0x03, 0x6c, 0x81, 0x0f,
	0xc0, 0x8c, 0xb7, 0xe3, 0x19, 0x83, 0xd5, 0x68, 0x59, 0xfb, 0x5c, 0xd6, 0x26, 0x45, 0xa3, 0x2e,
	0x76, 0xc0, 0x12, 0x5d, 0x9a, 0x3d, 0xe1, 0x00, 0x7a, 0x3b, 0xf5, 0xae, 0xf4, 0x49, 0xf1, 0x7f,
	0xd8, 0x87, 0xee, 0xce, 0x92, 0xe1, 0x41, 0xf5, 0xbc, 0x91, 0x8e, 0x4e, 0xf2, 0xcc, 0x3b, 0x08,
	0xc0, 0xea, 0x19, 0xfc, 0x3f, 0xde, 0x40, 0x94, 0xb4, 0x83, 0x79, 0x17, 0x87, 0xd0, 0xdf, 0xea,
	0x97, 0x3c, 0x23, 0xe5, 0x78, 0xb8, 0x58, 0xc3, 0x30, 0x6e, 0x72, 0xda, 0x9e, 0x0b, 0xaa, 0xd4,
	0xf8, 0x42, 0x8f, 0x20, 0x8c, 0x5f, 0x33, 0x75, 0xe0, 0x41, 0x45, 0x89, 0x7f, 0x28, 0x9d, 0x55,
	0x02, 0xfd, 0xf6, 0x1f, 0x6e, 0x60, 0xf4, 0x7b, 0x31, 0xbc, 0xbf, 0x2c, 0x71, 0x95, 0xd8, 0x64,
	0xf2, 0x97, 0x64, 0x8b, 0x37, 0xe6, 0x2f, 0xf5, 0xf8, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x39, 0x42,
	0xcf, 0x6a, 0xbb, 0x01, 0x00, 0x00,
}
